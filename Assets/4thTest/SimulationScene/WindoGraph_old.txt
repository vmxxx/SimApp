using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

using UnityEngine.UI;

public class WindoGraph : MonoBehaviour
{
    public static WindoGraph instance;
    public Texture squareTexture;
    public Texture leftTriangleTexture;
    public Texture rightTriangleTexture;
    public GameObject newValInputBox;
    public List<float> initialValueList = new List<float>() { 1 };
    public float newValue;
    public RectTransform windoGraph;
    private RectTransform graphContainerTransform;

    public  float oldHighestY = -1f;
    public  float highestY = -1f;
    private float graphWidth;
    private float graphHeight;
    public  float yMaximum = 1;
    public  float oldYMaximum = 1;
    private float xSize;
    private int   valueCount;
    private bool initiallyThereWasOneValue = true;


    private GameObject lastCircleGameObject = null;
    private string triangleDirection = "";
    private float squareHeight;
    private float triangleHeight;
    private float lastXPosition = 0f;
    private float lastYPosition = 0f;

    public GameObject XAxis;
    public GameObject YAxis;
    public GameObject[] XLabels = new GameObject[9];
    public GameObject[] YLabels = new GameObject[9];

    public float daysPassed = 0f;


    public GameObject canvas;
    private RectTransform canvasRectTransform;

    private float[] prevResolution;
    private float[] currResolution;

    public void OnSubmit()
    {
    }

    [SerializeField] private Sprite circleSprite;
    public RectTransform graphContainer;
    public GameObject emptyContainer;


    private void Awake()
    {
        if (WindoGraph.instance == null)
        {
            instance = this;
        }
    }


    public void Start()
    {
        canvasRectTransform = canvas.GetComponent<RectTransform>();
        prevResolution = new float[] { canvasRectTransform.rect.width, canvasRectTransform.rect.height };

        graphContainer.sizeDelta = new Vector2(windoGraph.rect.width * 0.8f, windoGraph.rect.height * 0.8f);
        graphContainer.anchoredPosition = new Vector2(windoGraph.rect.width * 0.5f, windoGraph.rect.height * 0.5f);

        graphHeight = graphContainer.sizeDelta.y;
        highestY = graphHeight;
    }

    public void Update()
    {

        currResolution = new float[2] { canvasRectTransform.rect.width, canvasRectTransform.rect.height };

        if (prevResolution[0] != currResolution[0] || prevResolution[1] != currResolution[1])
        {
            //Debug.Log("new resolution2 " + windoGraph.sizeDelta);
            prevResolution = new float[2] { currResolution[0], currResolution[1] };

            graphContainer.sizeDelta = new Vector2(windoGraph.rect.width * 0.8f, windoGraph.rect.height * 0.8f);
            graphContainer.anchoredPosition = new Vector2(windoGraph.rect.width * 0.5f, windoGraph.rect.height * 0.5f);
            //realignAllObjects();
            //realignObjects("Hawks");
            for (int i = 4; i < graphContainer.transform.childCount; i++)
            {
                realignObjects(graphContainer.transform.GetChild(i).name);
            }
            realignLabels();
            /*
            if (graphHeight <= highestY)
            {
                Debug.Log("(graphHeight <= highestY)");
                highestY = graphHeight;
            }
            else if (lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY)
            {
                Debug.Log("(lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY)");
                highestY = lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y;
            }
            /**/
            if (lastCircleGameObject != null && lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY)
            {
                //Debug.Log("(lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY)");
                highestY = lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y;
            }
            else
            {
                highestY = graphHeight;
            }
        }
    }


    private void realignAllObjects()
    {
        //GameObject agentContainer = graphContainer.transform.Find(container).gameObject;
        for(int i = 0; i < graphContainer.transform.childCount; i++)
        {
            realignObjects(graphContainer.transform.GetChild(i).name);
        }
    }

    public float oldGraphHeight;

    public void realignObjects(string container)
    {

        //value = yPosition / graphHeight = xxx / oldYMaximum
        //value = xxx = (yPosition * oldYMaximum) / graphHeight

        /*
        if (lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY) highestY = lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y;
        else if (graphHeight < highestY) highestY = graphHeight;
        /**/

        GameObject agentContainer = graphContainer.transform.Find(container).gameObject;
        valueCount = (agentContainer.transform.childCount / 2) + 1;
        graphWidth = graphContainer.sizeDelta.x;
        graphHeight = graphContainer.sizeDelta.y;


        //highestY = (graphHeight < highestY) ? lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y : highestY;
        //highestY = graphHeight;

        //if (highestY > graphHeight) { highestY = graphHeight; }
        //float oldYMaximum = yMaximum;
        //yMaximum = (newValue > yMaximum) ? newValue : yMaximum;
        xSize = (valueCount - 1 != 0) ? (graphWidth / (valueCount - 1)) : (0);

        GameObject circleGameObject;

        //Debug.Log(valueCount + ": valueCOunt, agnetContainer: " + agentContainer);
        //Debug.Log("agentContainer.transform.GetChild(0).gameObject: " + agentContainer.transform.GetChild(0).gameObject);
        lastCircleGameObject = agentContainer.transform.GetChild(0).gameObject;
        float Y = lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y;
        float oldProportion = Y / highestY; //for hawks this should be 1, for doves this should be 0.7142
        //float oldProportion = Y / graphHeight;
        //float value = (Y * oldYMaximum) / highestY;
        float newY = oldProportion * graphHeight;
        if (container == "Hawks")
        {
            //Debug.Log(" oldProportion = Y / highestY: " + oldProportion + " = " + Y + " / " + highestY + "                                " + " newY = oldProportion * graphHeight: " + newY + " = " + oldProportion + " * " + graphHeight);
            //Debug.Log();
        }
        float xPosition = (0 * xSize);
        float yPosition = newY;
        float lastYPosition = yPosition;
        lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition = new Vector2(xPosition, yPosition);
        for (int i = 1; i < valueCount; i++)
        {
            int a = i - 1;
            circleGameObject = agentContainer.transform.GetChild(1 + (2 * a) + 0).gameObject;
            GameObject dotConnection = agentContainer.transform.GetChild(1 + (2 * a) + 1).gameObject;

            Y = circleGameObject.GetComponent<RectTransform>().anchoredPosition.y;
            oldProportion = Y / highestY;
            //oldProportion = Y / graphHeight;
            newY = oldProportion * graphHeight;
            //value = (Y * oldYMaximum) / highestY;
            //proportion = yMaximum / highestY;
            xPosition = (i * xSize);
            yPosition = newY;
            //yPosition = ((Y / (yMaximum / oldYMaximum)));
            circleGameObject.GetComponent<RectTransform>().anchoredPosition = new Vector2(xPosition, yPosition);
            realignDotConnection(lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition, circleGameObject.GetComponent<RectTransform>().anchoredPosition, dotConnection);

            lastCircleGameObject = circleGameObject;
            lastYPosition = yPosition;
        }
        //highestY = lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y;

    }

    private GameObject CreateCircle(Vector2 anchoredPosition, GameObject agentContainer, Color circleColor)
    {
        GameObject gameObject = new GameObject("circle", typeof(Image));
        gameObject.transform.SetParent(agentContainer.transform, false);
        gameObject.GetComponent<Image>().sprite = circleSprite;
        gameObject.GetComponent<Image>().color = circleColor;
        RectTransform rectTransform = gameObject.GetComponent<RectTransform>();
        rectTransform.anchoredPosition = anchoredPosition;
        rectTransform.sizeDelta = new Vector2(3f, 3f);

        //keep everything on the lower left corner
        rectTransform.anchorMin = new Vector2(0, 0);
        rectTransform.anchorMax = new Vector2(0, 0);

        return gameObject;

    }

    public void addInitialValue(float val, string container, Color agentColor)
    {
        GameObject agentContainer = Instantiate(emptyContainer);
        agentContainer.transform.SetParent(graphContainer.transform);
        agentContainer.name = container;

        valueCount = 1;
        graphWidth = graphContainer.sizeDelta.x;
        graphHeight = graphContainer.sizeDelta.y;
        //yMaximum = (val > yMaximum) ? val : yMaximum;
        //oldYMaximum = yMaximum;
        //xSize = graphWidth / (valueCount - 1);

        lastXPosition = 0f;
        lastYPosition = 0f;
        lastCircleGameObject = null;

        //Debug.Log("highestY: " + highestY);
        //Debug.Log(" val / yMaximum: " + val + " / " + yMaximum + ": " + (val / yMaximum));
        float xPosition = (0 * graphWidth);
        float yProportion = val / yMaximum;
        float yPosition = yProportion * highestY;
        //float yPosition = (val / yMaximum) * graphHeight;
        GameObject circleGameObject = CreateCircle(new Vector2(xPosition, yPosition), agentContainer, agentColor);
        lastCircleGameObject = circleGameObject;

        //lastXPosition = xPosition;
        //lastYPosition = yPosition;

        //oldYMaximum = yMaximum;
        //highestY = (lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY) ? lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y : highestY;
    }


    public void addNewValue(string container, Color agentColor)
    {

        GameObject agentContainer = graphContainer.transform.Find(container).gameObject;
        valueCount = (agentContainer.transform.childCount / 2) + 1 + 1;
        graphWidth = graphContainer.sizeDelta.x;
        graphHeight = graphContainer.sizeDelta.y;

        /*
        GameObject agentContainer = graphContainer.transform.Find(container).gameObject;
        //newValue = Int32.Parse(newValInputBox.transform.GetChild(2).GetComponent<Text>().text);
        //valueCount = valueCount + 1;
        valueCount = (agentContainer.transform.childCount / 2) + 1 + 1;
        //graphWidth = graphContainer.sizeDelta.x;
        graphHeight = graphContainer.sizeDelta.y;
        //yMaximum = (newValue > yMaximum) ? newValue : yMaximum;
        xSize = graphWidth / (valueCount - 1);
        int i = valueCount;

        //Debug.Log("highestY: " + highestY);
        //Debug.Log(" val / yMaximum: " + newValue + " / " + yMaximum + ": " + (newValue / yMaximum));
        float xPosition = (i * xSize);
        float yProportion = (newValue / yMaximum);
        //Debug.Log("yProportion = (newValue / yMaximum):  " + yProportion + " = " + newValue + " / " + yMaximum);
        float yPosition = yProportion * graphHeight;
        //Debug.Log("(" + container + ") xPosition / yPosition: " + xPosition + " / " + yPosition);

        GameObject circleGameObject = CreateCircle(new Vector2(xPosition, yPosition), agentContainer, agentColor);
        if(valueCount != 2)
        {
            CreateDotConnection(lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition, circleGameObject.GetComponent<RectTransform>().anchoredPosition, agentContainer, agentColor);
        }
        else
        {
            CreateDotConnection(lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition, circleGameObject.GetComponent<RectTransform>().anchoredPosition, agentContainer, agentColor);
        }

        lastCircleGameObject = circleGameObject;
        lastXPosition = xPosition;
        lastYPosition = yPosition;

        if (yPosition > highestY) highestY = yPosition;
        //highestY = (lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y > highestY) ? lastCircleGameObject.GetComponent<RectTransform>().anchoredPosition.y : highestY;
        /**/
    }

    public void realignLabels()
    {
        
        //Debug.Log("yMaximum: " + yMaximum);

        graphWidth = graphContainer.sizeDelta.x;
        graphHeight = graphContainer.sizeDelta.y;

        Transform label;
        RectTransform rectTransform;
        float Y;

        //Y axis
        RectTransform YarrowHead1 = YAxis.transform.GetChild(1).GetComponent<RectTransform>();
        RectTransform YarrowHead2 = YAxis.transform.GetChild(2).GetComponent<RectTransform>();
        YarrowHead1.anchoredPosition = new Vector2(-6f, graphHeight - 7);
        YarrowHead2.anchoredPosition = new Vector2( 6f, graphHeight - 9);
        for (int i = YAxis.transform.childCount - 2; i >= 3; i--)
        {
            label = YAxis.transform.GetChild(i);
            rectTransform = label.GetComponent<RectTransform>();
            Y = rectTransform.anchoredPosition.y;
            rectTransform.anchoredPosition = new Vector2(0, ((Y / (yMaximum / oldYMaximum))));
            label.Find("Text").GetComponent<Text>().text = ((Y / graphHeight) * yMaximum).ToString();
            Y = rectTransform.anchoredPosition.y;

            if (Y < graphHeight - 30) label.gameObject.SetActive(true);
            else label.gameObject.SetActive(false);
        }

        label = YAxis.transform.GetChild(11);
        rectTransform = label.GetComponent<RectTransform>();
        Y = rectTransform.anchoredPosition.y;
        rectTransform.anchoredPosition = new Vector2(0, ((Y / (yMaximum / oldYMaximum))));
        label.Find("Text").GetComponent<Text>().text = ((Y / graphHeight) * yMaximum).ToString();

        if (Y < graphHeight - 30)
        {
            for (int i = YAxis.transform.childCount - 1; i >= 3; i--)
            {
                int a = i - 2;
                label = YAxis.transform.GetChild(i);
                rectTransform = label.GetComponent<RectTransform>();
                rectTransform.anchoredPosition = new Vector2(0, (((float)a / 7f) * graphHeight));
                label.Find("Text").GetComponent<Text>().text = (((float)a / 7f) * yMaximum).ToString();
                Y = rectTransform.anchoredPosition.y;

                if (Y >= graphHeight - 30) label.gameObject.SetActive(false);
                else label.gameObject.SetActive(true);
            }
        }


        //X axis
        RectTransform XarrowHead1 = XAxis.transform.GetChild(1).GetComponent<RectTransform>();
        RectTransform XarrowHead2 = XAxis.transform.GetChild(2).GetComponent<RectTransform>();
        XarrowHead1.anchoredPosition = new Vector2(graphWidth - 7, -6f);
        XarrowHead2.anchoredPosition = new Vector2(graphWidth - 9,  6f);

        float X;
        for (int i = XAxis.transform.childCount - 2; i >= 3; i--)
        {
            int a = i - 2;
            label = XAxis.transform.GetChild(i);
            rectTransform = label.GetComponent<RectTransform>();
            X = rectTransform.anchoredPosition.x;
            if (daysPassed > 1) { X = (X / ((float)daysPassed / (float)(daysPassed - 1))); }
            rectTransform.anchoredPosition = new Vector2(X, 0);
            label.Find("Text").GetComponent<Text>().text = (((float)a / 7f) * daysPassed).ToString();

            if (X < graphWidth - 30) label.gameObject.SetActive(true);
            else label.gameObject.SetActive(false);
        }

        label = XAxis.transform.GetChild(11);
        rectTransform = label.GetComponent<RectTransform>();
        X = rectTransform.anchoredPosition.x;
        if (daysPassed > 1) { X = (X / ((float)daysPassed / (float)(daysPassed - 1))); }
        rectTransform.anchoredPosition = new Vector2(X, 0);
        label.Find("Text").GetComponent<Text>().text = ((9f / 7f) * daysPassed).ToString();

        if (X < graphWidth - 30)
        {
            for (int i = XAxis.transform.childCount - 1; i >= 3; i--)
            {
                int a = i - 2;
                label = XAxis.transform.GetChild(i);
                rectTransform = label.GetComponent<RectTransform>();
                rectTransform.anchoredPosition = new Vector2((((float)a / 7f) * graphWidth), 0);
                label.Find("Text").GetComponent<Text>().text = (((float)a / 7f) * daysPassed).ToString();
                X = rectTransform.anchoredPosition.x;

                if (X >= graphWidth - 30) label.gameObject.SetActive(false);
                else label.gameObject.SetActive(true);
            }
        }

        /*
        for (int i = 3; i < YAxis.transform.childCount; i++)
        {
            label = YAxis.transform.GetChild(i);
            rectTransform = label.GetComponent<RectTransform>();
            Y = rectTransform.anchoredPosition.y;

            if (Y >= graphHeight - 30) label.gameObject.SetActive(false);
            else label.gameObject.SetActive(true);
        }
        /**/
    }


    private void realignDotConnection(Vector2 dotPositionA, Vector2 dotPositionB, GameObject dotConnection)
    {
        RectTransform rectTransform = dotConnection.GetComponent<RectTransform>();
        Vector2 dir = (dotPositionB - dotPositionA).normalized;
        float distance = Vector2.Distance(dotPositionA, dotPositionB);
        rectTransform.anchorMin = new Vector2(0, 0);
        rectTransform.anchorMax = new Vector2(0, 0);
        rectTransform.sizeDelta = new Vector2(distance, 3f);
        rectTransform.anchoredPosition = dotPositionA + dir * distance * 0.5f;
        rectTransform.localEulerAngles = new Vector3(0, 0, GetAngleFromVectorFloat(dir));
    }

    private void CreateDotConnection(Vector2 dotPositionA, Vector2 dotPositionB, GameObject agentContainer, Color connectionColor)
    {
        GameObject gameObject = new GameObject("dotConnection", typeof(Image));
        gameObject.transform.SetParent(agentContainer.transform, false);
        gameObject.GetComponent<Image>().color = connectionColor;
        RectTransform rectTransform = gameObject.GetComponent<RectTransform>();
        Vector2 dir = (dotPositionB - dotPositionA).normalized;
        float distance = Vector2.Distance(dotPositionA, dotPositionB);
        rectTransform.anchorMin = new Vector2(0, 0);
        rectTransform.anchorMax = new Vector2(0, 0);
        rectTransform.sizeDelta = new Vector2(distance, 3f);
        rectTransform.anchoredPosition = dotPositionA + dir * distance * 0.5f;
        rectTransform.localEulerAngles = new Vector3(0, 0, GetAngleFromVectorFloat(dir));
        //return gameObject;
    }

    private static float GetAngleFromVectorFloat(Vector3 dir)
    {
        dir = dir.normalized;
        float n = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg;
        if (n < 0) n += 360;

        return n;
    }

    public float FindHighestValueInAList(List<float> list)
    {
        if (list.Count == 0)
        {
            return 1;
        }
        float maxAge = float.MinValue;
        float itr = 0;
        foreach (float val in list)
        {
            itr = itr + 1;
            if (val > maxAge)
            {
                maxAge = val;
            }
        }
        return maxAge;
    }
}
